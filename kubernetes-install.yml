- hosts: kubemasters
  become: true
  become_user: root
  tasks:
    - name: Disable SWAP since kubernetes can't work with swap enabled (1/2)
      shell: |
        swapoff -a
    - name: Disable SWAP in fstab since kubernetes can't work with swap enabled (2/2)
      replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'
    - name: Uninstall docker, docker-engine, docker.io, containerd, runc
      apt:
        name: 
        - docker
        - docker-engine
        - docker.io
        - containerd
        - runc
        state: absent
        force_apt_get: true
    - name: Install required dependencies
      apt:
        name:
        - ca-certificates
        - curl
        - gnupg
        - lsb-release
        state: present
        force_apt_get: true
        update_cache: true
    - name: Check for Docker GPG key
      stat:
        path: /usr/share/keyrings/docker-archive-keyring.gpg
      register: docker_gpg
    - name: Install Docker's official GPG key
      ansible.builtin.shell: 
        cmd: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
      when: not docker_gpg.stat.exists
    - name: Check for Docker Stable Repository
      stat:
        path: /etc/apt/sources.list.d/docker.list
      register: docker_stable
    - name: Set Docker Stable Repository
      ansible.builtin.shell: echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
      when: not docker_stable.stat.exists
    - name: Install docker engine
      apt:
        name: 
        - docker-ce
        - docker-ce-cli
        - docker-compose-plugin
        - containerd.io
        state: present
        force_apt_get: true
        update_cache: true
    - name: Copy Docker cri
      ansible.builtin.copy:
        src: /home/ansible/docker-cri/cri-dockerd
        dest: /home/ansible/cri-dockerd
        owner: root
        group: root
        mode: '0755'
    - name: Check for Docker cri install
      stat:
        path: /usr/local/bin/cri-dockerd
      register: docker_cri
    - name: Install Dockerd cri
      ansible.builtin.shell: 
        cmd: |
          install -o root -g root -m 0755 /home/ansible/cri-dockerd /usr/local/bin/cri-dockerd
      when: not docker_cri.stat.exists
    - name: Copy Docker cri service file
      ansible.builtin.copy:
        src: /home/ansible/docker-cri/cri-docker.service
        dest: /etc/systemd/system/cri-docker.service
        owner: root
        group: root
        mode: '0755'
    - name: Copy Docker cri socket file
      ansible.builtin.copy:
        src: /home/ansible/docker-cri/cri-docker.socket
        dest: /etc/systemd/system/cri-docker.socket
        owner: root
        group: root
        mode: '0755'
    - name: sed cri-docker to point to /usr/local/bin
      ansible.builtin.shell: sed -i -e 's,/usr/bin/cri-dockerd,/usr/local/bin/cri-dockerd,' /etc/systemd/system/cri-docker.service
    - name: Issue daemon-reload to pick up config changes
      ansible.builtin.systemd:
        daemon_reload: yes
    - name: Enable service cri-docker.service
      ansible.builtin.systemd:
        name: cri-docker.service
        enabled: yes
    - name: Enable socket cri-docker.socket
      ansible.builtin.systemd:
        name: cri-docker.socket
        enabled: yes
    - name: Check /etc/modules-load.d/k8s.conf existence
      stat:
        path: /etc/modules-load.d/k8s.conf
      register: modules_k8s
    - name: Letting iptables see bridged traffic 1/3
      ansible.builtin.shell:
        cmd: |
          cat <<EOF | tee /etc/modules-load.d/k8s.conf
          br_netfilter
          EOF
      when: not modules_k8s.stat.exists
    - name: Check /etc/sysctl.d/k8s.conf existence
      stat:
        path: /etc/sysctl.d/k8s.conf
      register: sysctl_k8s
    - name: Letting iptables see bridged traffic 2/3
      ansible.builtin.shell:
        cmd: |
          cat <<EOF | tee /etc/sysctl.d/k8s.conf
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
          EOF
      when: not sysctl_k8s.stat.exists
    - name: Letting iptables see bridged traffic 3/3
      ansible.builtin.shell:
        cmd: |
          sysctl --system
      when: not modules_k8s.stat.exists or not sysctl_k8s.stat.exists
    - name: Install kubernetes required dependencies
      apt:
        name: 
        - apt-transport-https
        - ca-certificates
        - curl
        state: present
        force_apt_get: true
        update_cache: true
    - name: Check for Kuberenetes GPG key
      stat:
        path: /usr/share/keyrings/kubernetes-archive-keyring.gpg
      register: kubernetes_gpg
    - name: Add Kubernetes's official GPG key
      ansible.builtin.shell: 
        cmd: curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
      when: not kubernetes_gpg.stat.exists
    - name: Check for Kubernetes APT repo
      stat:
        path: /etc/apt/sources.list.d/kubernetes.list
      register: kubernetes_apt
    - name: Add Kuberenetes repo to apt
      ansible.builtin.shell: "echo \"deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main\" | tee /etc/apt/sources.list.d/kubernetes.list"
      when: not kubernetes_apt.stat.exists
    - name: Install kubernetes required dependencies
      apt:
        name: 
        - kubectl
        - kubelet
        - kubeadm
        state: present
        force_apt_get: true
        update_cache: true
    - name: Hold Kubernetes 1/3
      dpkg_selections:
        name: kubectl
        selection: hold
    - name: Hold Kubernetes 2/3
      dpkg_selections:
        name: kubelet
        selection: hold
    - name: Hold Kubernetes 3/3
      dpkg_selections:
        name: kubeadm
        selection: hold
